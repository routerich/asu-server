#!/bin/bash

# ===============================================================================
# –ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ASU —Å–µ—Ä–≤–µ—Ä–æ–º OpenWrt
# –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Image Builder
# ===============================================================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
INSTALL_DIR="${INSTALL_DIR:-/opt/asu-server}"
CONFIG_FILE="$INSTALL_DIR/imagebuilders.json"
SERVER_NAME="${SERVER_NAME:-Local ASU Server}"
DOMAIN="${DOMAIN:-}"

# ===============================================================================
# –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –°–ò–°–¢–ï–ú–´
# ===============================================================================

check_requirement() {
    local name="$1"
    local current="$2"
    local required="$3"
    local status="$4"
    
    printf "%-25s" "$name:"
    
    if [ "$status" = "ok" ]; then
        echo -e "${GREEN}‚úì $current${NC} (—Ç—Ä–µ–±—É–µ—Ç—Å—è: $required)"
    elif [ "$status" = "warning" ]; then
        echo -e "${YELLOW}‚ö† $current${NC} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: $required)"
    else
        echo -e "${RED}‚úó $current${NC} (—Ç—Ä–µ–±—É–µ—Ç—Å—è: $required)"
    fi
}

check_system_requirements() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π           ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""

    # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    echo -e "${YELLOW}=== –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ===${NC}"
    OS=$(lsb_release -d 2>/dev/null | cut -f2 || echo "Unknown")
    ARCH=$(uname -m)

    if [[ "$OS" =~ Ubuntu.*2[024]\. ]] || [[ "$OS" =~ Debian.*1[12] ]]; then
        check_requirement "–û–°" "$OS" "Ubuntu 20.04+/Debian 11+" "ok"
    else
        check_requirement "–û–°" "$OS" "Ubuntu 20.04+/Debian 11+" "error"
    fi

    if [ "$ARCH" = "x86_64" ]; then
        check_requirement "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞" "$ARCH" "x86_64" "ok"
    else
        check_requirement "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞" "$ARCH" "x86_64" "error"
    fi

    # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –ø–∞–º—è—Ç—å
    echo ""
    echo -e "${YELLOW}=== –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã ===${NC}"
    CPU_CORES=$(nproc)
    RAM_GB=$(free -g | awk '/^Mem:/ {print $2}')
    DISK_AVAIL_GB=$(df -BG / | tail -1 | awk '{print $4}' | sed 's/G//')

    if [ "$CPU_CORES" -ge 4 ]; then
        check_requirement "–Ø–¥—Ä–∞ CPU" "$CPU_CORES —è–¥–µ—Ä" "4+ —è–¥–µ—Ä" "ok"
    elif [ "$CPU_CORES" -ge 2 ]; then
        check_requirement "–Ø–¥—Ä–∞ CPU" "$CPU_CORES —è–¥—Ä–∞" "4+ —è–¥–µ—Ä" "warning"
    else
        check_requirement "–Ø–¥—Ä–∞ CPU" "$CPU_CORES —è–¥—Ä–æ" "2+ —è–¥–µ—Ä" "error"
    fi

    if [ "$RAM_GB" -ge 8 ]; then
        check_requirement "RAM" "${RAM_GB}GB" "8+ GB" "ok"
    elif [ "$RAM_GB" -ge 4 ]; then
        check_requirement "RAM" "${RAM_GB}GB" "8+ GB" "warning"
    else
        check_requirement "RAM" "${RAM_GB}GB" "4+ GB" "error"
    fi

    if [ "$DISK_AVAIL_GB" -ge 100 ]; then
        check_requirement "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ" "${DISK_AVAIL_GB}GB" "100+ GB" "ok"
    elif [ "$DISK_AVAIL_GB" -ge 20 ]; then
        check_requirement "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ" "${DISK_AVAIL_GB}GB" "100+ GB" "warning"
    else
        check_requirement "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ" "${DISK_AVAIL_GB}GB" "20+ GB" "error"
    fi

    # –°–µ—Ç—å
    echo ""
    echo -e "${YELLOW}=== –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===${NC}"
    if ping -c 1 google.com >/dev/null 2>&1; then
        check_requirement "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç" "–î–æ—Å—Ç—É–ø–µ–Ω" "–¢—Ä–µ–±—É–µ—Ç—Å—è" "ok"
    else
        check_requirement "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç" "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω" "–¢—Ä–µ–±—É–µ—Ç—Å—è" "error"
    fi

    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    echo ""
    if [ "$CPU_CORES" -ge 4 ] && [ "$RAM_GB" -ge 8 ] && [ "$DISK_AVAIL_GB" -ge 100 ]; then
        echo -e "${GREEN}üéâ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è!${NC} –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
        return 0
    elif [ "$CPU_CORES" -ge 2 ] && [ "$RAM_GB" -ge 4 ] && [ "$DISK_AVAIL_GB" -ge 20 ]; then
        echo -e "${YELLOW}‚ö† –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è${NC} - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        return 1
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è${NC} - —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ"
        return 2
    fi
}

# ===============================================================================
# –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø IMAGE BUILDER
# ===============================================================================

init_imagebuilder_config() {
    mkdir -p "$(dirname "$CONFIG_FILE")"
    if [ ! -f "$CONFIG_FILE" ]; then
        echo '{"imagebuilders": []}' > "$CONFIG_FILE"
    fi
}

list_imagebuilders() {
    echo -e "${BLUE}=== –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Image Builder ===${NC}"
    echo ""
    
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö Image Builder"
        return
    fi
    
    jq -r '.imagebuilders[] | "\(.version) | \(.target) | \(.path) | \(.added) | \(.enabled)"' "$CONFIG_FILE" | \
    while IFS='|' read -r version target path added enabled; do
        status=$([ "$enabled" = "true" ] && echo -e "${GREEN}–≤–∫–ª—é—á–µ–Ω${NC}" || echo -e "${RED}–≤—ã–∫–ª—é—á–µ–Ω${NC}")
        echo -e "–í–µ—Ä—Å–∏—è: ${YELLOW}$version${NC}, Target: ${YELLOW}$target${NC}, –°—Ç–∞—Ç—É—Å: $status"
        echo "  –ü—É—Ç—å: $path"
        echo "  –î–æ–±–∞–≤–ª–µ–Ω: $added"
        echo ""
    done
}

add_imagebuilder() {
    local version=$1
    local target=$2
    local source=$3
    local custom_name=$4
    
    if [ -z "$version" ] || [ -z "$target" ] || [ -z "$source" ]; then
        echo -e "${RED}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: add_imagebuilder <–≤–µ—Ä—Å–∏—è> <target> <–∏—Å—Ç–æ—á–Ω–∏–∫> [–Ω–∞–∑–≤–∞–Ω–∏–µ]${NC}"
        echo "–ò—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å:"
        echo "  - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .tar.xz"
        echo "  - URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        echo "  - 'official' –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å downloads.openwrt.org"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    if jq -e ".imagebuilders[] | select(.version == \"$version\" and .target == \"$target\")" "$CONFIG_FILE" > /dev/null 2>&1; then
        echo -e "${YELLOW}Image Builder –¥–ª—è $version/$target —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        echo -n "–ó–∞–º–µ–Ω–∏—Ç—å? (y/n): "
        read -r response
        if [ "$response" != "y" ]; then
            return 1
        fi
        remove_imagebuilder "$version" "$target" "quiet"
    fi
    
    local ib_dir="$INSTALL_DIR/imagebuilders/$version/$target"
    mkdir -p "$ib_dir"
    
    echo -e "${YELLOW}–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Image Builder $version/$target...${NC}"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if [ "$source" = "official" ]; then
        local arch=$(echo "$target" | tr '/' '-')
        local url="https://downloads.openwrt.org/releases/$version/targets/$target/openwrt-imagebuilder-$version-$arch.Linux-x86_64.tar.xz"
        
        echo "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å $url..."
        if ! wget -O "/tmp/imagebuilder-$version-$arch.tar.xz" "$url"; then
            echo -e "${RED}–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è${NC}"
            return 1
        fi
        source="/tmp/imagebuilder-$version-$arch.tar.xz"
    elif [[ "$source" =~ ^https?:// ]]; then
        echo "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å $source..."
        if ! wget -O "/tmp/imagebuilder-temp.tar.xz" "$source"; then
            echo -e "${RED}–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è${NC}"
            return 1
        fi
        source="/tmp/imagebuilder-temp.tar.xz"
    fi
    
    # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
    echo "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Image Builder..."
    if ! tar -xf "$source" -C "$ib_dir" --strip-components=1; then
        echo -e "${RED}–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏${NC}"
        rm -rf "$ib_dir"
        return 1
    fi
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    local name="${custom_name:-OpenWrt $version}"
    local entry=$(jq -n \
        --arg ver "$version" \
        --arg tgt "$target" \
        --arg pth "$ib_dir" \
        --arg name "$name" \
        --arg date "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
        '{version: $ver, target: $tgt, path: $pth, name: $name, added: $date, enabled: true}')
    
    jq ".imagebuilders += [$entry]" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    
    echo -e "${GREEN}Image Builder —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!${NC}"
    update_asu_config
}

remove_imagebuilder() {
    local version=$1
    local target=$2
    local quiet=$3
    
    if [ -z "$version" ] || [ -z "$target" ]; then
        echo -e "${RED}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: remove_imagebuilder <–≤–µ—Ä—Å–∏—è> <target>${NC}"
        return 1
    fi
    
    if [ "$quiet" != "quiet" ]; then
        echo -n "–£–¥–∞–ª–∏—Ç—å Image Builder $version/$target? (y/n): "
        read -r response
        if [ "$response" != "y" ]; then
            return 1
        fi
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    jq "del(.imagebuilders[] | select(.version == \"$version\" and .target == \"$target\"))" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && \
    mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    rm -rf "$INSTALL_DIR/imagebuilders/$version/$target"
    
    [ "$quiet" != "quiet" ] && echo -e "${GREEN}Image Builder —É–¥–∞–ª–µ–Ω${NC}"
    update_asu_config
}

toggle_imagebuilder() {
    local version=$1
    local target=$2
    local action=$3
    
    if [ -z "$version" ] || [ -z "$target" ] || [ -z "$action" ]; then
        echo -e "${RED}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: toggle_imagebuilder <–≤–µ—Ä—Å–∏—è> <target> <enable|disable>${NC}"
        return 1
    fi
    
    local enabled=$([ "$action" = "enable" ] && echo "true" || echo "false")
    
    jq "(.imagebuilders[] | select(.version == \"$version\" and .target == \"$target\")).enabled = $enabled" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && \
    mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    
    echo -e "${GREEN}Image Builder $version/$target $([ "$action" = "enable" ] && echo "–≤–∫–ª—é—á–µ–Ω" || echo "–≤—ã–∫–ª—é—á–µ–Ω")${NC}"
    update_asu_config
}

update_asu_config() {
    echo -e "${YELLOW}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ASU...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ASU
    cat > "$INSTALL_DIR/asu/custom_config.py" << 'EOF'
import json
from pathlib import Path
from asu.config import Settings as BaseSettings

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö Image Builder
config_file = Path("/opt/asu-server/imagebuilders.json")
custom_branches = {}

if config_file.exists():
    with open(config_file) as f:
        data = json.load(f)
        imagebuilders = data.get("imagebuilders", [])
        
        for ib in imagebuilders:
            if not ib.get("enabled", True):
                continue
                
            version = ib["version"]
            target = ib["target"]
            
            if version not in custom_branches:
                custom_branches[version] = {
                    "enabled": True,
                    "snapshot": version == "SNAPSHOT",
                    "targets": {}
                }
            
            custom_branches[version]["targets"][target] = {
                "imagebuilder_path": ib["path"],
                "enabled": True
            }

class LocalSettings(BaseSettings):
    @property
    def branches(self):
        base_branches = super().branches.copy()
        base_branches.update(custom_branches)
        return base_branches
    
    upstream_url: str = ""
    allow_defaults: bool = True
    max_custom_rootfs_size_mb: int = 2048
    max_defaults_length: int = 40960

settings = LocalSettings()
EOF

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ASU –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    if systemctl is-active --quiet asu-server 2>/dev/null; then
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ASU —Å–µ—Ä–≤–µ—Ä–∞..."
        systemctl restart asu-server
    fi
}

# ===============================================================================
# –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò
# ===============================================================================

install_dependencies() {
    echo -e "${YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    apt update && apt upgrade -y
    apt install -y \
        curl \
        git \
        python3 \
        python3-pip \
        python3-poetry \
        podman \
        podman-compose \
        redis-server \
        nginx \
        jq \
        tar \
        xz-utils \
        wget \
        ufw \
        htop \
        nano
}

setup_podman() {
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Podman...${NC}" >&2
    local user="${SUDO_USER:-root}"
    if [ "$user" = "root" ]; then
        user="asu"
        if ! id "$user" &>/dev/null; then
            useradd -m -s /bin/bash "$user"
            echo "–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $user" >&2
        fi
    fi
    
    # –ü–æ–ø—ã—Ç–∫–∞ –≤–∫–ª—é—á–∏—Ç—å linger –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if command -v loginctl >/dev/null 2>&1; then
        loginctl enable-linger "$user" 2>/dev/null || {
            echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å linger –¥–ª—è $user" >&2
            echo "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π —Å—Ä–µ–¥–µ" >&2
        }
    fi
    
    echo "$user"
}

create_directory_structure() {
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"
    mkdir -p "$INSTALL_DIR"
    cd "$INSTALL_DIR"
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    if [ ! -d "asu" ]; then
        git clone https://github.com/openwrt/asu.git
    fi
    
    if [ ! -d "firmware-selector-openwrt-org" ]; then
        git clone https://github.com/openwrt/firmware-selector-openwrt-org.git
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    mkdir -p public/store imagebuilders custom_feeds redis-data
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤
    local user="${1:-root}"
    chown -R "$user:$user" "$INSTALL_DIR"
    chmod -R 755 public
}

configure_asu() {
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ASU —Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    local user="$1"
    
    cat > "$INSTALL_DIR/asu/.env" << EOF
PUBLIC_PATH=$INSTALL_DIR/public
CONTAINER_SOCKET_PATH=/run/user/$(id -u "$user")/podman/podman.sock
ALLOW_DEFAULTS=1
SERVER_STATS=1
REDIS_URL=redis://redis:6379/0
ASU_TITLE="$SERVER_NAME"
EOF

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cat > "$INSTALL_DIR/asu/custom_config.py" << 'EOF'
from asu.config import Settings as BaseSettings

class LocalSettings(BaseSettings):
    upstream_url: str = ""
    allow_defaults: bool = True
    max_custom_rootfs_size_mb: int = 2048
    max_defaults_length: int = 40960

settings = LocalSettings()
EOF
}

configure_firmware_selector() {
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firmware-selector...${NC}"
    
    cat > "$INSTALL_DIR/firmware-selector-openwrt-org/www/config.js" << EOF
var config = {
  asu_url: window.location.origin + '/api',
  image_url: window.location.origin + '/store',
  versions: ['SNAPSHOT', '24.10.1', '24.10', '23.05'],
  default_version: '24.10.1',
  asu_enabled: true,
  show_custom_images: true,
  allow_custom_packages: true,
  show_advanced_options: true,
  server_name: '$SERVER_NAME'
};
EOF
}

configure_nginx() {
    echo -e "${YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...${NC}"
    
    cat > /etc/nginx/sites-available/asu << EOF
server {
    listen 80;
    server_name _;

    # Firmware Selector
    location / {
        root $INSTALL_DIR/firmware-selector-openwrt-org/www;
        index index.html;
        try_files \$uri \$uri/ =404;
    }

    # ASU API
    location /api/ {
        proxy_pass http://127.0.0.1:8000/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        proxy_read_timeout 1200s;
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        client_max_body_size 50M;
    }

    # Store
    location /store/ {
        alias $INSTALL_DIR/public/store/;
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;
    }
}
EOF

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    ln -sf /etc/nginx/sites-available/asu /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    nginx -t && systemctl restart nginx
}

create_systemd_service() {
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    local user="$1"
    
    cat > /etc/systemd/system/asu-server.service << EOF
[Unit]
Description=OpenWrt ASU Server
After=network.target redis.service nginx.service
Requires=redis.service

[Service]
Type=simple
User=$user
Group=$user
WorkingDirectory=$INSTALL_DIR/asu
Environment="PATH=/usr/local/bin:/usr/bin:/bin"
ExecStartPre=/bin/bash -c 'systemctl --user start podman.socket || true'
ExecStart=/usr/bin/podman-compose up
ExecStop=/usr/bin/podman-compose down
Restart=on-failure
RestartSec=15
TimeoutStartSec=300

[Install]
WantedBy=multi-user.target
EOF
}

build_and_start_services() {
    echo -e "${YELLOW}–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
    local user="$1"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ä–µ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    export XDG_RUNTIME_DIR="/run/user/$(id -u "$user")"
    mkdir -p "$XDG_RUNTIME_DIR" 2>/dev/null || true
    chown "$user:$user" "$XDG_RUNTIME_DIR" 2>/dev/null || true
    chmod 700 "$XDG_RUNTIME_DIR" 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ Podman socket (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
    if command -v systemctl >/dev/null 2>&1; then
        su - "$user" -c "export XDG_RUNTIME_DIR='$XDG_RUNTIME_DIR'; systemctl --user enable podman.socket 2>/dev/null || echo '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å podman.socket'"
        su - "$user" -c "export XDG_RUNTIME_DIR='$XDG_RUNTIME_DIR'; systemctl --user start podman.socket 2>/dev/null || echo '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å podman.socket'"
    else
        echo "Systemd –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É podman socket"
    fi
    
    # –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    cd "$INSTALL_DIR/asu"
    su - "$user" -c "cd $INSTALL_DIR/asu && podman-compose build"
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    systemctl enable redis-server nginx
    systemctl start redis-server
    
    systemctl daemon-reload
    systemctl enable asu-server
    systemctl start asu-server
}

create_store_structure() {
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã store...${NC}"
    local store_dir="$INSTALL_DIR/public/store"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤
    mkdir -p "$store_dir/releases/24.10.1"
    mkdir -p "$store_dir/releases/24.10"
    mkdir -p "$store_dir/releases/23.05"
    mkdir -p "$store_dir/releases/SNAPSHOT"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .overview.json —Ñ–∞–π–ª–æ–≤
    cat > "$store_dir/releases/24.10.1/.overview.json" << 'EOF'
{
  "version": "24.10.1",
  "branch": "24.10",
  "release_date": "2024-10-01",
  "targets": {},
  "profiles": {}
}
EOF

    cat > "$store_dir/releases/24.10/.overview.json" << 'EOF'
{
  "version": "24.10",
  "branch": "24.10",
  "release_date": "2024-10-01",
  "targets": {},
  "profiles": {}
}
EOF

    cat > "$store_dir/releases/23.05/.overview.json" << 'EOF'
{
  "version": "23.05",
  "branch": "23.05",
  "release_date": "2023-05-01",
  "targets": {},
  "profiles": {}
}
EOF

    cat > "$store_dir/releases/SNAPSHOT/.overview.json" << 'EOF'
{
  "version": "SNAPSHOT",
  "branch": "master",
  "release_date": "ongoing",
  "targets": {},
  "profiles": {}
}
EOF
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
    chmod -R 755 "$store_dir"
    
    echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ store —Å–æ–∑–¥–∞–Ω–∞"
}

create_management_tools() {
    echo -e "${YELLOW}–°–æ–∑–¥–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...${NC}"
    
    # –°–∫—Ä–∏–ø—Ç —Å—Ç–∞—Ç—É—Å–∞
    cat > "$INSTALL_DIR/status.sh" << 'EOF'
#!/bin/bash

echo "=== –°—Ç–∞—Ç—É—Å ASU —Å–µ—Ä–≤–µ—Ä–∞ ==="
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "Nginx:" $(systemctl is-active nginx)
echo "Redis:" $(systemctl is-active redis)
echo "ASU:" $(systemctl is-active asu-server)

echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"

if curl -s http://localhost/ > /dev/null; then
    echo "‚úì Firmware Selector –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚úó Firmware Selector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

if curl -s http://localhost:8000/api/overview > /dev/null; then
    echo "‚úì ASU API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    echo "‚úó ASU API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "Image Builder:"
if [ -f "/opt/asu-server/imagebuilders.json" ]; then
    jq -r '.imagebuilders[] | "- \(.version)/\(.target): \(if .enabled then "–≤–∫–ª—é—á–µ–Ω" else "–≤—ã–∫–ª—é—á–µ–Ω" end)"' /opt/asu-server/imagebuilders.json
else
    echo "–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö Image Builder"
fi

echo ""
SERVER_IP=$(hostname -I | awk '{print $1}')
echo "–î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å—É:"
echo "- –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://$SERVER_IP/"
echo "- API: http://$SERVER_IP/api/"
echo "- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://$SERVER_IP/api/docs"
EOF

    chmod +x "$INSTALL_DIR/status.sh"
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è store
    cat > "$INSTALL_DIR/update-store.sh" << 'EOF'
#!/bin/bash

STORE_DIR="/opt/asu-server/public/store"

echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã store..."

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤
for version in "24.10.1" "24.10" "23.05" "SNAPSHOT"; do
    mkdir -p "$STORE_DIR/releases/$version"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .overview.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f "$STORE_DIR/releases/$version/.overview.json" ]; then
        echo "–°–æ–∑–¥–∞–Ω–∏–µ .overview.json –¥–ª—è $version"
        cat > "$STORE_DIR/releases/$version/.overview.json" << JSON
{
  "version": "$version",
  "branch": "${version%.*}",
  "release_date": "$(date -u +%Y-%m-%d)",
  "targets": {},
  "profiles": {}
}
JSON
    fi
done

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
chmod -R 755 "$STORE_DIR"

echo "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ store –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
EOF
    
    chmod +x "$INSTALL_DIR/update-store.sh"
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    cat > "$INSTALL_DIR/CLIENT_SETUP.md" << EOF
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ OpenWrt –¥–ª—è Attended Sysupgrade

## –í–∞—Ä–∏–∞–Ω—Ç 1: LuCI (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç:
\`\`\`
opkg update
opkg install luci-app-attendedsysupgrade
\`\`\`

2. –í –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–æ—É—Ç–µ—Ä–∞:
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ System ‚Üí Attended Sysupgrade
   - Server URL: \`http://$(hostname -I | awk '{print $1}')/api/\`
   - –ù–∞–∂–º–∏—Ç–µ "Request Firmware"

## –í–∞—Ä–∏–∞–Ω—Ç 2: CLI —Å owut

\`\`\`bash
owut --server http://$(hostname -I | awk '{print $1}')/api/ upgrade
\`\`\`

## –í–∞—Ä–∏–∞–Ω—Ç 3: CLI —Å auc (—Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏)

\`\`\`bash
opkg install auc
auc -s http://$(hostname -I | awk '{print $1}')/api/
\`\`\`
EOF
}

# ===============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ===============================================================================

show_main_menu() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë              ASU Server Manager               ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo "1) –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
    echo "2) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ASU —Å–µ—Ä–≤–µ—Ä"
    echo "3) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Image Builder"
    echo "4) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
    echo "5) –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenWrt 24.10.1"
    echo "6) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Attended Sysupgrade"
    echo "7) –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
    echo "8) –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
    echo "0) –í—ã—Ö–æ–¥"
    echo ""
    echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
}

show_imagebuilder_menu() {
    echo -e "${BLUE}=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Image Builder ===${NC}"
    echo "1) –ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ"
    echo "2) –î–æ–±–∞–≤–∏—Ç—å Image Builder"
    echo "3) –£–¥–∞–ª–∏—Ç—å Image Builder"
    echo "4) –í–∫–ª—é—á–∏—Ç—å Image Builder"
    echo "5) –í—ã–∫–ª—é—á–∏—Ç—å Image Builder"
    echo "6) –ò–º–ø–æ—Ä—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤"
    echo "7) –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ASU"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
}

show_services_menu() {
    echo -e "${BLUE}=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏ ===${NC}"
    echo "1) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ASU —Å–µ—Ä–≤–µ—Ä"
    echo "2) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "3) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "4) –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "5) –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ ASU"
    echo "6) –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Nginx"
    echo "0) –ù–∞–∑–∞–¥"
    echo ""
    echo -n "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "
}

import_official_releases() {
    echo -e "${BLUE}=== –ò–º–ø–æ—Ä—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ OpenWrt ===${NC}"
    
    local versions=("24.10.1" "24.10" "23.05" "22.03" "SNAPSHOT")
    local targets=("x86/64" "x86/generic" "ath79/generic" "ramips/mt7621" "mediatek/filogic" "ipq40xx/generic")
    
    echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: ${versions[*]}"
    echo "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ targets: ${targets[*]}"
    echo ""
    echo "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö):"
    read -r selected_versions
    
    echo "–í—ã–±–µ—Ä–∏—Ç–µ targets (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö):"
    read -r selected_targets
    
    if [ "$selected_versions" = "all" ]; then
        selected_versions="${versions[*]}"
    fi
    
    if [ "$selected_targets" = "all" ]; then
        selected_targets="${targets[*]}"
    fi
    
    for version in $selected_versions; do
        for target in $selected_targets; do
            echo ""
            echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ $version/$target..."
            add_imagebuilder "$version" "$target" "official" "OpenWrt $version"
        done
    done
}

add_mediatek_24_10_1() {
    echo -e "${GREEN}=== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ OpenWrt 24.10.1 MediaTek Filogic ===${NC}"
    echo ""
    echo "–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: mediatek/filogic"
    echo "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: Xiaomi AX3000T/AX6000, TP-Link AX53/AX73, ASUS RT-AX53U –∏ –¥—Ä."
    echo ""
    echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
    read -r response
    
    if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
        add_imagebuilder "24.10.1" "mediatek/filogic" "official" "OpenWrt 24.10.1 MediaTek Filogic"
        echo -e "${GREEN}‚úì OpenWrt 24.10.1 MediaTek Filogic –¥–æ–±–∞–≤–ª–µ–Ω!${NC}"
    fi
}

configure_attended_sysupgrade() {
    echo -e "${BLUE}=== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Attended Sysupgrade ===${NC}"
    
    SERVER_IP=$(hostname -I | awk '{print $1}')
    
    echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ OpenWrt —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $INSTALL_DIR/CLIENT_SETUP.md"
    echo ""
    echo "–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:"
    echo ""
    echo "1. –ù–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ OpenWrt —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç:"
    echo "   opkg update && opkg install luci-app-attendedsysupgrade"
    echo ""
    echo "2. –í –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–æ—É—Ç–µ—Ä–∞:"
    echo "   System ‚Üí Attended Sysupgrade"
    echo "   Server URL: http://$SERVER_IP/api/"
    echo ""
    echo "3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CLI:"
    echo "   owut --server http://$SERVER_IP/api/ upgrade"
    echo ""
}

install_full_system() {
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë              –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ASU —Å–µ—Ä–≤–µ—Ä–∞             ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root –∏–ª–∏ —á–µ—Ä–µ–∑ sudo${NC}"
        return 1
    fi
    
    echo "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Local ASU Server):"
    read -r input_name
    if [ -n "$input_name" ]; then
        SERVER_NAME="$input_name"
    fi
    
    echo ""
    echo "–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:"
    echo "- –ù–∞–∑–≤–∞–Ω–∏–µ: $SERVER_NAME"
    echo "- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $INSTALL_DIR"
    echo ""
    echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): "
    read -r confirm
    
    if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        return 1
    fi
    
    echo ""
    echo -e "${GREEN}=== –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ===${NC}"
    
    # –≠—Ç–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    install_dependencies
    local user=$(setup_podman)
    create_directory_structure "$user"
    configure_asu "$user"
    configure_firmware_selector
    configure_nginx
    create_systemd_service "$user"
    build_and_start_services "$user"
    create_store_structure
    create_management_tools
    init_imagebuilder_config
    
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë             –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!              ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    SERVER_IP=$(hostname -I | awk '{print $1}')
    echo -e "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${GREEN}http://$SERVER_IP/${NC}"
    echo -e "üîß API endpoint: ${GREEN}http://$SERVER_IP/api/${NC}"
    echo -e "üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ${GREEN}http://$SERVER_IP/api/docs${NC}"
    echo ""
    echo "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Image Builder –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é 3"
}

# ===============================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ===============================================================================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_imagebuilder_config

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "$1" in
    check)
        check_system_requirements
        ;;
    install)
        install_full_system
        ;;
    list)
        list_imagebuilders
        ;;
    add)
        shift
        add_imagebuilder "$@"
        ;;
    remove)
        shift
        remove_imagebuilder "$@"
        ;;
    enable)
        shift
        toggle_imagebuilder "$1" "$2" "enable"
        ;;
    disable)
        shift
        toggle_imagebuilder "$1" "$2" "disable"
        ;;
    status)
        if [ -f "$INSTALL_DIR/status.sh" ]; then
            bash "$INSTALL_DIR/status.sh"
        else
            echo "ASU —Å–µ—Ä–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 install"
        fi
        ;;
    update)
        update_asu_config
        ;;
    *)
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        while true; do
            clear
            show_main_menu
            read -r choice
            
            case $choice in
                1) 
                    clear
                    check_system_requirements
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                2) 
                    clear
                    install_full_system
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                3)
                    while true; do
                        clear
                        show_imagebuilder_menu
                        read -r ib_choice
                        
                        case $ib_choice in
                            1) 
                                clear
                                list_imagebuilders
                                ;;
                            2) 
                                echo "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24.10.1):"
                                read -r version
                                echo "–í–≤–µ–¥–∏—Ç–µ target (–Ω–∞–ø—Ä–∏–º–µ—Ä, mediatek/filogic):"
                                read -r target
                                echo "–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø—É—Ç—å/URL/official):"
                                read -r source
                                echo "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):"
                                read -r name
                                add_imagebuilder "$version" "$target" "$source" "$name"
                                ;;
                            3)
                                echo "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é:"
                                read -r version
                                echo "–í–≤–µ–¥–∏—Ç–µ target:"
                                read -r target
                                remove_imagebuilder "$version" "$target"
                                ;;
                            4)
                                echo "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é:"
                                read -r version
                                echo "–í–≤–µ–¥–∏—Ç–µ target:"
                                read -r target
                                toggle_imagebuilder "$version" "$target" "enable"
                                ;;
                            5)
                                echo "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é:"
                                read -r version
                                echo "–í–≤–µ–¥–∏—Ç–µ target:"
                                read -r target
                                toggle_imagebuilder "$version" "$target" "disable"
                                ;;
                            6) 
                                import_official_releases
                                ;;
                            7) 
                                update_asu_config
                                ;;
                            0) 
                                break
                                ;;
                            *) 
                                echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
                                ;;
                        esac
                        
                        if [ $ib_choice != 0 ]; then
                            echo ""
                            echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                            read -r
                        fi
                    done
                    ;;
                4) 
                    clear
                    if [ -f "$INSTALL_DIR/status.sh" ]; then
                        bash "$INSTALL_DIR/status.sh"
                    else
                        echo "ASU —Å–µ—Ä–≤–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–Ω–∫—Ç 2 –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
                    fi
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                5) 
                    clear
                    add_mediatek_24_10_1
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                6) 
                    clear
                    configure_attended_sysupgrade
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                7) 
                    clear
                    echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ –≤: $INSTALL_DIR/CLIENT_SETUP.md"
                    if [ -f "$INSTALL_DIR/CLIENT_SETUP.md" ]; then
                        cat "$INSTALL_DIR/CLIENT_SETUP.md"
                    fi
                    echo ""
                    echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                    read -r
                    ;;
                8)
                    while true; do
                        clear
                        show_services_menu
                        read -r svc_choice
                        
                        case $svc_choice in
                            1) systemctl restart asu-server ;;
                            2) systemctl restart asu-server nginx redis ;;
                            3) systemctl stop asu-server ;;
                            4) systemctl start asu-server ;;
                            5) journalctl -u asu-server -f ;;
                            6) journalctl -u nginx -f ;;
                            0) break ;;
                            *) echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}" ;;
                        esac
                        
                        if [ $svc_choice != 0 ] && [ $svc_choice != 5 ] && [ $svc_choice != 6 ]; then
                            echo ""
                            echo "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
                            read -r
                        fi
                    done
                    ;;
                0) 
                    echo "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
                    exit 0
                    ;;
                *) 
                    echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä${NC}"
                    sleep 1
                    ;;
            esac
        done
        ;;
esac